// <auto-generated />
using System;
using Christiansoe.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Christiansoe.Migrations
{
    [DbContext(typeof(ChristiansoeContext))]
    [Migration("20211117113642_AddUserSpecificTables")]
    partial class AddUserSpecificTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Christiansoe.Models.BingoBoard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MapId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.ToTable("BingoBoard");
                });

            modelBuilder.Entity("Christiansoe.Models.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BingoBoardId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EndMonth")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SoundUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartMonth")
                        .HasColumnType("int");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BingoBoardId");

                    b.ToTable("Field");
                });

            modelBuilder.Entity("Christiansoe.Models.Map", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Map");
                });

            modelBuilder.Entity("Christiansoe.Models.Point", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int?>("MapId")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.ToTable("Point");
                });

            modelBuilder.Entity("Christiansoe.Models.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BingoBoardId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HikingTime")
                        .HasColumnType("int");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<int?>("MapId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ThemeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BingoBoardId");

                    b.HasIndex("MapId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Route");
                });

            modelBuilder.Entity("Christiansoe.Models.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Theme");
                });

            modelBuilder.Entity("Christiansoe.Models.UserBingoBoard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BingoBoardId")
                        .HasColumnType("int");

                    b.Property<bool>("Done")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BingoBoardId");

                    b.ToTable("UserBingoBoard");
                });

            modelBuilder.Entity("Christiansoe.Models.UserField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FieldId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMarked")
                        .HasColumnType("bit");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int?>("UserBingoBoardId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("UserBingoBoardId");

                    b.ToTable("UserField");
                });

            modelBuilder.Entity("Christiansoe.Models.BingoBoard", b =>
                {
                    b.HasOne("Christiansoe.Models.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId");

                    b.Navigation("Map");
                });

            modelBuilder.Entity("Christiansoe.Models.Field", b =>
                {
                    b.HasOne("Christiansoe.Models.BingoBoard", null)
                        .WithMany("Fields")
                        .HasForeignKey("BingoBoardId");
                });

            modelBuilder.Entity("Christiansoe.Models.Point", b =>
                {
                    b.HasOne("Christiansoe.Models.Map", null)
                        .WithMany("Points")
                        .HasForeignKey("MapId");
                });

            modelBuilder.Entity("Christiansoe.Models.Route", b =>
                {
                    b.HasOne("Christiansoe.Models.BingoBoard", "BingoBoard")
                        .WithMany()
                        .HasForeignKey("BingoBoardId");

                    b.HasOne("Christiansoe.Models.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId");

                    b.HasOne("Christiansoe.Models.Theme", null)
                        .WithMany("Routes")
                        .HasForeignKey("ThemeId");

                    b.Navigation("BingoBoard");

                    b.Navigation("Map");
                });

            modelBuilder.Entity("Christiansoe.Models.UserBingoBoard", b =>
                {
                    b.HasOne("Christiansoe.Models.BingoBoard", "BingoBoard")
                        .WithMany()
                        .HasForeignKey("BingoBoardId");

                    b.Navigation("BingoBoard");
                });

            modelBuilder.Entity("Christiansoe.Models.UserField", b =>
                {
                    b.HasOne("Christiansoe.Models.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId");

                    b.HasOne("Christiansoe.Models.UserBingoBoard", null)
                        .WithMany("Fields")
                        .HasForeignKey("UserBingoBoardId");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("Christiansoe.Models.BingoBoard", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("Christiansoe.Models.Map", b =>
                {
                    b.Navigation("Points");
                });

            modelBuilder.Entity("Christiansoe.Models.Theme", b =>
                {
                    b.Navigation("Routes");
                });

            modelBuilder.Entity("Christiansoe.Models.UserBingoBoard", b =>
                {
                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
